<script setup>
import { ref } from 'vue'

// Define page meta
definePageMeta({
  layout: 'default'
})

// Reactive data
const loading = ref(false)
const error = ref('')
const success = ref('')

// Form data
const form = ref({
  name: '',
  email: '',
  password: '',
  industry: '',
  size: '',
  website: '',
  description: '',
  contactName: '',
  contactPosition: '',
  contactPhone: '',
  street: '',
  city: '',
  state: '',
  country: '',
  zipCode: ''
})

// File uploads
const files = ref({
  businessLicense: null,
  taxCertificate: null,
  companyProfile: null
})

// Industry options
const industryOptions = [
  'Technology',
  'Healthcare',
  'Finance',
  'Education',
  'Manufacturing',
  'Retail',
  'Construction',
  'Transportation',
  'Energy',
  'Media',
  'Real Estate',
  'Hospitality',
  'Agriculture',
  'Other'
]

// Company size options
const sizeOptions = [
  '1-10 employees',
  '11-50 employees',
  '51-200 employees',
  '201-500 employees',
  '501-1000 employees',
  '1000+ employees'
]

// Country options (simplified list)
const countryOptions = [
  'United States',
  'Canada',
  'United Kingdom',
  'Germany',
  'France',
  'Australia',
  'Japan',
  'Singapore',
  'India',
  'Brazil',
  'Mexico',
  'Other'
]

// Handle file upload
const handleFileUpload = (event, fileType) => {
  const file = event.target.files[0]
  if (file) {
    // Validate file size (5MB max)
    if (file.size > 5 * 1024 * 1024) {
      error.value = 'File size must be less than 5MB'
      event.target.value = ''
      return
    }
    
    // Validate file type
    const allowedTypes = ['application/pdf', 'image/jpeg', 'image/jpg', 'image/png']
    if (!allowedTypes.includes(file.type)) {
      error.value = 'Only PDF, JPG, and PNG files are allowed'
      event.target.value = ''
      return
    }
    
    files.value[fileType] = file
    error.value = ''
  }
}

// Clear file input
const clearFile = (fileType) => {
  files.value[fileType] = null
  const input = document.querySelector(`input[data-file-type="${fileType}"]`)
  if (input) {
    input.value = ''
  }
}

// Handle form submission
const handleRegister = async () => {
  try {
    loading.value = true
    error.value = ''
    success.value = ''

    // Validate required fields
    const requiredFields = [
      'name', 'email', 'industry', 'size', 'password',
      'contactName', 'contactPosition', 'contactPhone'
    ]
    
    for (const field of requiredFields) {
      if (!form.value[field]) {
        throw new Error(`${field.replace(/([A-Z])/g, ' $1').toLowerCase()} is required`)
      }
    }

    // Validate business license upload
    if (!files.value.businessLicense) {
      throw new Error('Business license document is required')
    }

    // Prepare form data
    const formData = new FormData()
    
    // Add form fields
    Object.keys(form.value).forEach(key => {
      if (form.value[key]) {
        formData.append(key, form.value[key])
      }
    })

    // Add files
    Object.keys(files.value).forEach(key => {
      if (files.value[key]) {
        formData.append(key, files.value[key])
      }
    })

    // Submit registration
    const response = await $fetch('/api/auth/company/register', {
      method: 'POST',
      body: {
        name: form.value.name,
        email: form.value.email,
        password: form.value.password,
        contactPerson: {
          name: form.value.contactName,
          position: form.value.contactPosition,
          phone: form.value.contactPhone
        },
        companyDetails: {
          industry: form.value.industry,
          size: form.value.size,
          website: form.value.website,
          description: form.value.description,
          address: {
            street: form.value.street,
            city: form.value.city,
            state: form.value.state,
            country: form.value.country,
            zipCode: form.value.zipCode
          }
        },
        documents: {
          businessLicense: 'uploaded', // In real app, handle file upload
          taxCertificate: files.value.taxCertificate ? 'uploaded' : '',
          companyProfile: files.value.companyProfile ? 'uploaded' : ''
        }
      }
    })

    if (response.success) {
      success.value = response.message
      // Reset form
      form.value = {
        name: '',
        email: '',
        industry: '',
        size: '',
        website: '',
        password: '',
        description: '',
        contactName: '',
        contactPosition: '',
        contactPhone: '',
        street: '',
        city: '',
        state: '',
        country: '',
        zipCode: ''
      }
      files.value = {
        businessLicense: null,
        taxCertificate: null,
        companyProfile: null
      }
    }

  } catch (err) {
    error.value = err.data?.message || err.message || 'Registration failed'
  } finally {
    loading.value = false
  }
}

// Navigate to login
const goToLogin = () => {
  navigateTo('/company/login')
}
</script>

<style scoped>
.form-container {
  max-width: 800px;
}

.input-field {
  @apply w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200;
}

.input-field:focus {
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.select-field {
  @apply w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200 bg-white;
}

.textarea-field {
  @apply w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200 resize-vertical;
}

.file-input {
  @apply w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary-500 focus:border-transparent transition-all duration-200 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-primary-50 file:text-primary-700 hover:file:bg-primary-100;
}

.btn-primary {
  @apply w-full bg-primary-500 hover:bg-primary-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed;
}

.btn-secondary {
  @apply w-full bg-gray-500 hover:bg-gray-600 text-white font-semibold py-3 px-6 rounded-lg transition-colors duration-200;
}

.step-indicator {
  @apply flex items-center justify-center w-8 h-8 rounded-full text-sm font-medium;
}

.step-active {
  @apply bg-primary-500 text-white;
}

.step-completed {
  @apply bg-green-500 text-white;
}

.step-inactive {
  @apply bg-gray-200 text-gray-600;
}

.file-preview {
  @apply mt-2 p-3 bg-gray-50 rounded-lg border border-gray-200;
}

.error-message {
  @apply bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg;
}

.success-message {
  @apply bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg;
}

.section-card {
  @apply bg-white rounded-xl shadow-sm border border-gray-200 p-6;
}

.section-title {
  @apply text-lg font-semibold text-gray-900 mb-4 pb-2 border-b border-gray-200;
}

.field-group {
  @apply grid grid-cols-1 md:grid-cols-2 gap-4;
}

.field-full {
  @apply md:col-span-2;
}

.required-indicator {
  @apply text-red-500;
}

.help-text {
  @apply text-sm text-gray-500 mt-1;
}

.upload-area {
  @apply border-2 border-dashed border-gray-300 rounded-lg p-6 text-center hover:border-primary-400 transition-colors;
}

.upload-area.dragover {
  @apply border-primary-500 bg-primary-50;
}

.progress-bar {
  @apply w-full bg-gray-200 rounded-full h-2;
}

.progress-fill {
  @apply bg-primary-500 h-2 rounded-full transition-all duration-300;
}
</style>