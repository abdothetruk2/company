<template>
  <div class="flex min-h-screen bg-gray-50">
    <!-- Sidebar -->
    <AdminSidebar />
    
    <!-- Main Content -->
    <div class="flex-1 ml-64">
      <div class="p-8">
        <!-- Header -->
        <div class="mb-8">
          <div class="flex justify-between items-center">
            <div>
              <h1 class="text-3xl font-bold text-gray-900">Company Management</h1>
              <p class="text-gray-600 mt-2">Manage and review company registrations</p>
            </div>
            <button
              @click="showCreateModal = true"
              class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg flex items-center shadow-lg transition-all duration-200 hover:shadow-xl"
            >
              <svg class="w-5 h-5 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 6v6m0 0v6m0-6h6m-6 0H6"></path>
              </svg>
              Add Company
            </button>
          </div>
        </div>

        <!-- Filters Card -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 mb-8 p-6">
          <h3 class="text-lg font-semibold text-gray-900 mb-4">Filters</h3>
          <div class="grid grid-cols-1 md:grid-cols-4 gap-4">
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Search</label>
              <div class="relative">
                <input
                  v-model="filters.search"
                  type="text"
                  placeholder="Search companies..."
                  class="input-field pl-10"
                  @input="debouncedSearch"
                />
                <svg class="w-5 h-5 text-gray-400 absolute left-3 top-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z"></path>
                </svg>
              </div>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
              <select
                v-model="filters.status"
                @change="loadCompanies"
                class="input-field"
              >
                <option value="all">All Status</option>
                <option value="pending">Pending</option>
                <option value="approved">Approved</option>
                <option value="rejected">Rejected</option>
                <option value="suspended">Suspended</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Sort By</label>
              <select
                v-model="filters.sortBy"
                @change="loadCompanies"
                class="input-field"
              >
                <option value="createdAt">Registration Date</option>
                <option value="name">Company Name</option>
                <option value="status">Status</option>
              </select>
            </div>
            <div>
              <label class="block text-sm font-medium text-gray-700 mb-2">Order</label>
              <select
                v-model="filters.sortOrder"
                @change="loadCompanies"
                class="input-field"
              >
                <option value="desc">Newest First</option>
                <option value="asc">Oldest First</option>
              </select>
            </div>
          </div>
        </div>

        <!-- Error Alert -->
        <div v-if="error" class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
          <div class="flex">
            <svg class="w-5 h-5 text-red-400 mr-3 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <div>
              <h3 class="text-sm font-medium text-red-800">Error</h3>
              <p class="text-sm text-red-700 mt-1">{{ error }}</p>
            </div>
            <button @click="error = null" class="ml-auto text-red-400 hover:text-red-600">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>

        <!-- Success Alert -->
        <div v-if="successMessage" class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
          <div class="flex">
            <svg class="w-5 h-5 text-green-400 mr-3 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
            </svg>
            <div>
              <h3 class="text-sm font-medium text-green-800">Success</h3>
              <p class="text-sm text-green-700 mt-1">{{ successMessage }}</p>
            </div>
            <button @click="successMessage = null" class="ml-auto text-green-400 hover:text-green-600">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
              </svg>
            </button>
          </div>
        </div>

        <!-- Companies Table Card -->
        <div class="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
          <!-- Loading State -->
          <div v-if="loading" class="text-center py-12">
            <div class="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto"></div>
            <p class="text-gray-500 mt-4">Loading companies...</p>
          </div>
          
          <!-- Empty State -->
          <div v-else-if="companies.length === 0" class="text-center py-12">
            <svg class="w-16 h-16 text-gray-300 mx-auto mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 21V5a2 2 0 00-2-2H7a2 2 0 00-2 2v16m14 0h2m-2 0h-5m-9 0H3m2 0h5M9 7h1m-1 4h1m4-4h1m-1 4h1m-5 10v-5a1 1 0 011-1h2a1 1 0 011 1v5m-4 0h4"></path>
            </svg>
            <h3 class="text-lg font-medium text-gray-900 mb-2">No companies found</h3>
            <p class="text-gray-500 mb-6">Get started by adding your first company.</p>
            <button
              @click="showCreateModal = true"
              class="btn-primary"
            >
              Add Company
            </button>
          </div>

          <!-- Companies Table -->
          <div v-else class="overflow-x-auto">
            <table class="min-w-full divide-y divide-gray-200">
              <thead class="bg-gray-50">
                <tr>
                  <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Company
                  </th>
                  <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Contact
                  </th>
                  <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Industry
                  </th>
                  <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Status
                  </th>
                  <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Registration Date
                  </th>
                  <th class="px-6 py-4 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Actions
                  </th>
                </tr>
              </thead>
              <tbody class="bg-white divide-y divide-gray-200">
                <tr v-for="company in companies" :key="company._id" class="hover:bg-gray-50 transition-colors">
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div class="flex items-center">
                      <div class="flex-shrink-0 h-10 w-10">
                        <div class="h-10 w-10 rounded-full bg-blue-100 flex items-center justify-center">
                          <span class="text-blue-600 font-medium text-sm">{{ company.name?.charAt(0)?.toUpperCase() || 'C' }}</span>
                        </div>
                      </div>
                      <div class="ml-4">
                        <div class="text-sm font-medium text-gray-900">{{ company.name || 'N/A' }}</div>
                        <div class="text-sm text-gray-500">{{ company.email || 'N/A' }}</div>
                      </div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap">
                    <div>
                      <div class="text-sm text-gray-900">{{ company.contactPerson?.name || 'N/A' }}</div>
                      <div class="text-sm text-gray-500">{{ company.contactPerson?.position || 'N/A' }}</div>
                    </div>
                  </td>
                  <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                    {{ company.companyDetails?.industry || 'N/A' }}                  </td>
                                      <td class="px-6 py-4 whitespace-nowrap">
                                        <span class="px-2 py-1 text-xs font-medium rounded-full"
                                              :class="getStatusClass(company.status)">
                                          {{ company.status || 'pending' }}
                                        </span>
                                      </td>
                                      <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                        {{ formatDate(company.createdAt) }}
                                      </td>
                                      <td class="px-6 py-4 whitespace-nowrap text-right text-sm font-medium">
                                        <div class="flex space-x-2">
                                          <button
                                            @click="editCompany(company)"
                                            class="text-indigo-600 hover:text-indigo-900 transition-colors"
                                          >
                                            Edit
                                          </button>
                                          <button
                                            @click="deleteCompany(company._id)"
                                            class="text-red-600 hover:text-red-900 transition-colors"
                                          >
                                            Delete
                                          </button>
                                        </div>
                                      </td>
                                    </tr>
                                  </tbody>
                                </table>
                              </div>
                    
                              <!-- Pagination -->
                              <div v-if="pagination.totalPages > 1" class="bg-white px-4 py-3 flex items-center justify-between border-t border-gray-200 sm:px-6">
                                <div class="flex-1 flex justify-between sm:hidden">
                                  <button
                                    @click="changePage(pagination.currentPage - 1)"
                                    :disabled="pagination.currentPage === 1"
                                    class="relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                                  >
                                    Previous
                                  </button>
                                  <button
                                    @click="changePage(pagination.currentPage + 1)"
                                    :disabled="pagination.currentPage === pagination.totalPages"
                                    class="ml-3 relative inline-flex items-center px-4 py-2 border border-gray-300 text-sm font-medium rounded-md text-gray-700 bg-white hover:bg-gray-50"
                                  >
                                    Next
                                  </button>
                                </div>
                                <div class="hidden sm:flex-1 sm:flex sm:items-center sm:justify-between">
                                  <div>
                                    <p class="text-sm text-gray-700">
                                      Showing
                                      <span class="font-medium">{{ (pagination.currentPage - 1) * pagination.limit + 1 }}</span>
                                      to
                                      <span class="font-medium">{{ Math.min(pagination.currentPage * pagination.limit, pagination.total) }}</span>
                                      of
                                      <span class="font-medium">{{ pagination.total }}</span>
                                      results
                                    </p>
                                  </div>
                                  <div>
                                    <nav class="relative z-0 inline-flex rounded-md shadow-sm -space-x-px" aria-label="Pagination">
                                      <button
                                        @click="changePage(pagination.currentPage - 1)"
                                        :disabled="pagination.currentPage === 1"
                                        class="relative inline-flex items-center px-2 py-2 rounded-l-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                                      >
                                        Previous
                                      </button>
                                      <button
                                        v-for="page in getPageNumbers()"
                                        :key="page"
                                        @click="changePage(page)"
                                        :class="page === pagination.currentPage ? 'bg-indigo-50 border-indigo-500 text-indigo-600' : 'bg-white border-gray-300 text-gray-500 hover:bg-gray-50'"
                                        class="relative inline-flex items-center px-4 py-2 border text-sm font-medium"
                                      >
                                        {{ page }}
                                      </button>
                                      <button
                                        @click="changePage(pagination.currentPage + 1)"
                                        :disabled="pagination.currentPage === pagination.totalPages"
                                        class="relative inline-flex items-center px-2 py-2 rounded-r-md border border-gray-300 bg-white text-sm font-medium text-gray-500 hover:bg-gray-50"
                                      >
                                        Next
                                      </button>
                                    </nav>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                    
                        <!-- Create/Edit Company Modal -->
                        <div v-if="showCreateModal" class="fixed inset-0 bg-gray-600 bg-opacity-50 overflow-y-auto h-full w-full z-50">
                          <div class="relative top-20 mx-auto p-5 border w-11/12 md:w-3/4 lg:w-1/2 shadow-lg rounded-md bg-white">
                            <div class="mt-3">
                              <div class="flex justify-between items-center mb-6">
                                <h3 class="text-lg font-medium text-gray-900">
                                  {{ editingCompany ? 'Edit Company' : 'Add New Company' }}
                                </h3>
                                <button @click="closeModal" class="text-gray-400 hover:text-gray-600">
                                  <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
                                  </svg>
                                </button>
                              </div>
                    
                              <form @submit.prevent="submitForm" class="space-y-6">
                                <!-- Company Basic Info -->
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                  <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Company Name *</label>
                                    <input
                                      v-model="form.name"
                                      type="text"
                                      required
                                      class="input-field"
                                      placeholder="Enter company name"
                                    />
                                  </div>
                                  <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Email *</label>
                                    <input
                                      v-model="form.email"
                                      type="email"
                                      required
                                      class="input-field"
                                      placeholder="Enter company email"
                                    />
                                  </div>
                                </div>
                    
                                <!-- Contact Person -->
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                  <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Contact Person Name</label>
                                    <input
                                      v-model="form.contactPerson.name"
                                      type="text"
                                      class="input-field"
                                      placeholder="Enter contact person name"
                                    />
                                  </div>
                                  <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Position</label>
                                    <input
                                      v-model="form.contactPerson.position"
                                      type="text"
                                      class="input-field"
                                      placeholder="Enter position"
                                    />
                                  </div>
                                </div>
                    
                                <!-- Company Details -->
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                  <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Industry</label>
                                    <select v-model="form.companyDetails.industry" class="input-field">
                                      <option value="">Select Industry</option>
                                      <option value="technology">Technology</option>
                                      <option value="healthcare">Healthcare</option>
                                      <option value="finance">Finance</option>
                                      <option value="education">Education</option>
                                      <option value="retail">Retail</option>
                                      <option value="manufacturing">Manufacturing</option>
                                      <option value="other">Other</option>
                                    </select>
                                  </div>
                                  <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Company Size</label>
                                    <select v-model="form.companyDetails.size" class="input-field">
                                      <option value="">Select Size</option>
                                      <option value="1-10">1-10 employees</option>
                                      <option value="11-50">11-50 employees</option>
                                      <option value="51-200">51-200 employees</option>
                                      <option value="201-500">201-500 employees</option>
                                      <option value="500+">500+ employees</option>
                                    </select>
                                  </div>
                                </div>
                    
                                <div>
                                  <label class="block text-sm font-medium text-gray-700 mb-2">Website</label>
                                  <input
                                    v-model="form.companyDetails.website"
                                    type="url"
                                    class="input-field"
                                    placeholder="https://example.com"
                                  />
                                </div>
                    
                                <div>
                                  <label class="block text-sm font-medium text-gray-700 mb-2">Description</label>
                                  <textarea
                                    v-model="form.companyDetails.description"
                                    rows="3"
                                    class="input-field"
                                    placeholder="Enter company description"
                                  ></textarea>
                                </div>
                    
                                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                                  <div>
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Status</label>
                                    <select v-model="form.status" class="input-field">
                                      <option value="pending">Pending</option>
                                      <option value="approved">Approved</option>
                                      <option value="rejected">Rejected</option>
                                      <option value="suspended">Suspended</option>
                                    </select>
                                  </div>
                                  <div v-if="!editingCompany">
                                    <label class="block text-sm font-medium text-gray-700 mb-2">Password *</label>
                                    <input
                                      v-model="form.password"
                                      type="password"
                                      :required="!editingCompany"
                                      class="input-field"
                                      placeholder="Enter password"
                                    />
                                  </div>
                                </div>
                    
                                <!-- Form Actions -->
                                <div class="flex justify-end space-x-3 pt-6 border-t">
                                  <button
                                    type="button"
                                    @click="closeModal"
                                    class="btn-secondary"
                                  >
                                    Cancel
                                  </button>
                                  <button
                                    type="submit"
                                    :disabled="submitting"
                                    class="btn-primary flex items-center"
                                  >
                                    <svg v-if="submitting" class="animate-spin -ml-1 mr-3 h-5 w-5 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                                      <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                                      <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                                    </svg>
                                    {{ submitting ? 'Saving...' : (editingCompany ? 'Update Company' : 'Create Company') }}
                                  </button>
                                </div>
                              </form>
                            </div>
                          </div>
                        </div>
                      </div>
                    </template>
                    <script setup>
                    import { ref, onMounted, computed } from 'vue'
                    import { useAdminStore } from '~/stores/admin'
                    import { navigateTo } from '#app'
                    import AdminSidebar from '~/components/AdminSidebar.vue'
                    
                    // Define page meta for admin layout
                    definePageMeta({
                      layout: 'admin',
                      middleware: 'admin-auth'
                    })
                    
                    // Reactive data
                    const companies = ref([])
                    const loading = ref(true)
                    const error = ref(null)
                    const successMessage = ref(null)
                    const showCreateModal = ref(false)
                    const editingCompany = ref(null)
                    const submitting = ref(false)
                    
                    const filters = ref({
                      search: '',
                      status: 'all',
                      sortBy: 'createdAt',
                      sortOrder: 'desc',
                      page: 1,
                      limit: 10
                    })
                    
                    const pagination = ref({
                      currentPage: 1,
                      totalPages: 1,
                      total: 0,
                      limit: 10
                    })
                    
                    const form = ref({
                      name: '',
                      email: '',
                      password: '',
                      contactPerson: {
                        name: '',
                        position: ''
                      },
                      companyDetails: {
                        industry: '',
                        size: '',
                        website: '',
                        description: ''
                      },
                      status: 'pending'
                    })
                    
                    // Admin store
                    const adminStore = useAdminStore()
                    
                    // Computed properties
                    const getStatusClass = (status) => {
                      const classes = {
                        'pending': 'bg-yellow-100 text-yellow-800',
                        'approved': 'bg-green-100 text-green-800',
                        'active': 'bg-green-100 text-green-800',
                        'rejected': 'bg-red-100 text-red-800',
                        'suspended': 'bg-red-100 text-red-800'
                      }
                      return classes[status] || 'bg-gray-100 text-gray-800'
                    }
                    
                    const formatDate = (date) => {
                      if (!date) return 'N/A'
                      return new Date(date).toLocaleDateString('en-US', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric'
                      })
                    }
                    
                    const getPageNumbers = () => {
                      const pages = []
                      const start = Math.max(1, pagination.value.currentPage - 2)
                      const end = Math.min(pagination.value.totalPages, pagination.value.currentPage + 2)
                      
                      for (let i = start; i <= end; i++) {
                        pages.push(i)
                      }
                      return pages
                    }
                    
                    // Methods
                    const loadCompanies = async () => {
                      try {
                        loading.value = true
                        error.value = null
                        
                        const token = useCookie('admin-token')
                        
                        if (!token.value) {
                          throw new Error('No authentication token found')
                        }
                    
                        const query = new URLSearchParams()
                        if (filters.value.search) query.append('search', filters.value.search)
                        if (filters.value.status && filters.value.status !== 'all') query.append('status', filters.value.status)
                        query.append('page', filters.value.page.toString())
                        query.append('limit', filters.value.limit.toString())
                        query.append('sortBy', filters.value.sortBy)
                        query.append('sortOrder', filters.value.sortOrder)
                    
                        const response = await $fetch(`/api/admin/companies?${query.toString()}`, {
                          headers: {
                            'Authorization': `Bearer ${token.value}`
                          }
                        })
                    
                        // Handle different response structures
                        if (response.success && response.data) {
                          companies.value = response.data.companies || []
                          pagination.value = response.data.pagination || {
                            currentPage: 1,
                            totalPages: 1,
                            total: 0,
                            limit: 10
                          }
                        } else if (response.companies) {
                          // Handle direct companies array response
                          companies.value = response.companies
                          pagination.value = {
                            currentPage: 1,
                            totalPages: 1,
                            total: response.companies.length,
                            limit: 10
                          }
                        } else {
                          companies.value = []
                          pagination.value = {
                            currentPage: 1,
                            totalPages: 1,
                            total: 0,
                            limit: 10
                          }
                        }
                    
                      } catch (err) {
                        console.error('Error loading companies:', err)
                        error.value = err.data?.message || err.message || 'Failed to load companies'
                        companies.value = []
                      } finally {
                        loading.value = false
                      }
                    }
                    
                    // Debounced search function
                    let searchTimeout = null
                    const debouncedSearch = () => {
                      clearTimeout(searchTimeout)
                      searchTimeout = setTimeout(() => {
                        filters.value.page = 1
                        loadCompanies()
                      }, 500)
                    }
                    
                    const changePage = (page) => {
                      if (page >= 1 && page <= pagination.value.totalPages) {
                        filters.value.page = page
                        pagination.value.currentPage = page
                        loadCompanies()
                      }
                    }
                    
                    const resetForm = () => {
                      form.value = {
                        name: '',
                        email: '',
                        password: '',
                        contactPerson: {
                          name: '',
                          position: ''
                        },
                        companyDetails: {
                          industry: '',
                          size: '',
                          website: '',
                          description: ''
                        },
                        status: 'pending'
                      }
                    }
                    
                    const closeModal = () => {
                      showCreateModal.value = false
                      editingCompany.value = null
                      resetForm()
                    }
                    
                    const editCompany = (company) => {
                      editingCompany.value = company
                      form.value = {
                        name: company.name || '',
                        email: company.email || '',
                        password: '', // Don't populate password for editing
                        contactPerson: {
                          name: company.contactPerson?.name || '',
                          position: company.contactPerson?.position || ''
                        },
                        companyDetails: {
                          industry: company.companyDetails?.industry || '',
                          size: company.companyDetails?.size || '',
                          website: company.companyDetails?.website || '',
                          description: company.companyDetails?.description || ''
                        },
                        status: company.status || 'pending'
                      }
                      showCreateModal.value = true
                    }
                    
                    const submitForm = async () => {
                      try {
                        submitting.value = true
                        error.value = null
                        
                        const token = useCookie('admin-token')
                        
                        if (!token.value) {
                          throw new Error('No authentication token found')
                        }
                    
                        // Prepare form data
                        const formData = {
                          name: form.value.name,
                          email: form.value.email,
                          contactPerson: {
                            name: form.value.contactPerson.name,
                            position: form.value.contactPerson.position || 'Manager'
                          },
                          companyDetails: {
                            industry: form.value.companyDetails.industry,
                            size: form.value.companyDetails.size,
                            website: form.value.companyDetails.website,
                            description: form.value.companyDetails.description
                          },
                          status: form.value.status
                        }
                    
                        // Add password only if provided (for new companies or password updates)
                        if (form.value.password) {
                          formData.password = form.value.password
                        }
                    
                        let response
                        if (editingCompany.value) {
                          // Update existing company
                          response = await $fetch(`/api/admin/companies/${editingCompany.value._id}`, {
                            method: 'PUT',
                            headers: {
                              'Authorization': `Bearer ${token.value}`,
                              'Content-Type': 'application/json'
                            },
                            body: formData
                          })
                        } else {
                          // Create new company
                          response = await $fetch('/api/admin/companies', {
                            method: 'POST',
                            headers: {
                              'Authorization': `Bearer ${token.value}`,
                              'Content-Type': 'application/json'
                            },
                            body: formData
                          })
                        }
                    
                        if (response.success) {
                          successMessage.value = editingCompany.value 
                            ? 'Company updated successfully' 
                            : 'Company created successfully'
                          closeModal()
                          await loadCompanies()
                          
                          // Clear success message after 5 seconds
                          setTimeout(() => {
                            successMessage.value = null
                          }, 5000)
                        }
                      } catch (err) {
                        console.error('Error saving company:', err)
                        error.value = err.data?.message || err.message || 'Failed to save company'
                      } finally {
                        submitting.value = false
                      }
                    }
                    
                    const deleteCompany = async (companyId) => {
                      if (!confirm('Are you sure you want to delete this company? This action cannot be undone.')) {
                        return
                      }
                    
                      try {
                        const token = useCookie('admin-token')
                        
                        if (!token.value) {
                          throw new Error('No authentication token found')
                        }
                    
                        const response = await $fetch(`/api/admin/companies/${companyId}`, {
                          method: 'DELETE',
                          headers: {
                            'Authorization': `Bearer ${token.value}`
                          }
                        })
                    
                        if (response.success) {
                          successMessage.value = 'Company deleted successfully'
                          await loadCompanies()
                          
                          // Clear success message after 5 seconds
                          setTimeout(() => {
                            successMessage.value = null
                          }, 5000)
                        }
                      } catch (err) {
                        console.error('Error deleting company:', err)
                        error.value = err.data?.message || err.message || 'Failed to delete company'
                      }
                    }
                    
                    // Load companies on mount
                    onMounted(async () => {
                      // Ensure auth is initialized
                      await adminStore.initializeAuth()
                      
                      if (!adminStore.isAuthenticated) {
                        await navigateTo('/admin/login')
                        return
                      }
                    
                      loadCompanies()
                    })
                    </script>
                    
                    <style scoped>
                    .input-field {
                      @apply w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-colors;
                    }
                    
                    .btn-primary {
                      @apply bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded-md transition-colors font-medium;
                    }
                    
                    .btn-secondary {
                      @apply bg-gray-500 hover:bg-gray-600 text-white px-4 py-2 rounded-md transition-colors font-medium;
                    }
                    
                    .btn-primary:disabled,
                    .btn-secondary:disabled {
                      @apply opacity-50 cursor-not-allowed;
                    }
                    </style>